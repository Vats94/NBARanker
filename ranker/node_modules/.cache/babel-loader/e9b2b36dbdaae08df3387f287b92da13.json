{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VatsalVed\\\\Desktop\\\\Files\\\\Ranker\\\\ranker\\\\src\\\\components\\\\recordList.js\";\nimport React, { Component } from \"react\"; // This will require to npm install axios\n\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Record = props => /*#__PURE__*/_jsxDEV(\"tr\", {\n  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.playerName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.Elo\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 3\n}, this);\n\n_c = Record;\nexport default class RecordList extends Component {\n  // This is the constructor that shall store our data retrieved from the database\n  constructor(props) {\n    super(props);\n    this.state = {\n      records: []\n    };\n  } // This method will get the data from the database.\n\n\n  componentDidMount() {\n    axios.get(\"http://localhost:3000/record/\").then(response => {\n      console.log(response.data);\n      this.setState({\n        records: response.data\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }\n\n  sort() {} // This method will map out the users on the table\n\n\n  recordList() {\n    let sortedElos = this.state.records.sort(function (a, b) {\n      return parseFloat(b.Elo) - parseFloat(a.Elo);\n    });\n    console.log(sortedElos);\n    var rankedElos = [];\n\n    for (var i = 0; i < sortedElos.length(); i++) {\n      rankedElos[i] = {\n        'id': sortedElos[i]['id'],\n        'playerName': sortedElos[i].playerName,\n        'Elo': sortedElos[i].Elo,\n        'rank': i\n      };\n    }\n\n    console.log(rankedElos);\n    return this.state.records.map(currentrecord => {\n      return /*#__PURE__*/_jsxDEV(Record, {\n        record: currentrecord\n      }, currentrecord._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this);\n    });\n  } // This following section will display the table with the records of individuals.\n\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Record List\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-striped\",\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Player Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 74,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Elo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 75,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 73,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.recordList()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Record\");","map":{"version":3,"sources":["C:/Users/VatsalVed/Desktop/Files/Ranker/ranker/src/components/recordList.js"],"names":["React","Component","axios","Link","Record","props","record","playerName","Elo","RecordList","constructor","state","records","componentDidMount","get","then","response","console","log","data","setState","catch","error","sort","recordList","sortedElos","a","b","parseFloat","rankedElos","i","length","map","currentrecord","_id","render","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n// This will require to npm install axios\r\nimport axios from 'axios';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Record = (props) => (\r\n  <tr>\r\n    <td>{props.record.playerName}</td>\r\n    <td>{props.record.Elo}</td>\r\n  </tr>\r\n);\r\n\r\n\r\nexport default class RecordList extends Component {\r\n  // This is the constructor that shall store our data retrieved from the database\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { records: [] };\r\n  }\r\n\r\n  // This method will get the data from the database.\r\n  componentDidMount() {\r\n    axios\r\n      .get(\"http://localhost:3000/record/\")\r\n      .then((response) => {\r\n        console.log(response.data);\r\n        this.setState({ records: response.data });\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  sort(){\r\n\r\n  }\r\n\r\n  // This method will map out the users on the table\r\n  recordList() {\r\n    let sortedElos = this.state.records.sort(function(a, b) {\r\n      return parseFloat(b.Elo) - parseFloat(a.Elo);\r\n    });\r\n    console.log(sortedElos)\r\n    var rankedElos = []\r\n    for(var i = 0; i < sortedElos.length(); i++){\r\n      rankedElos[i] = {\r\n                        'id': sortedElos[i]['id'],\r\n                        'playerName':sortedElos[i].playerName,\r\n                        'Elo': sortedElos[i].Elo,\r\n                        'rank': i\r\n                        }\r\n    }\r\n    console.log(rankedElos)\r\n    return this.state.records.map((currentrecord) => {\r\n      return (\r\n        <Record\r\n          record={currentrecord}\r\n          key={currentrecord._id}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  // This following section will display the table with the records of individuals.\r\n  render() {\r\n    return (\r\n      \r\n        \r\n      <div>\r\n        <h3>Record List</h3>\r\n        <table className=\"table table-striped\" style={{ marginTop: 20 }}>\r\n          <thead>\r\n            <tr>\r\n              <th>Player Name</th>\r\n              <th>Elo</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{this.recordList()}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}