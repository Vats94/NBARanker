{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\VatsalVed\\\\Desktop\\\\Files\\\\Ranker\\\\ranker\\\\src\\\\components\\\\recordList.js\";\nimport React, { Component } from \"react\"; // This will require to npm install axios\n\nimport axios from 'axios';\nimport { Link } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Record = props => /*#__PURE__*/_jsxDEV(\"tr\", {\n  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.rank\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.playerName\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n    children: props.record.Elo\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 7,\n  columnNumber: 3\n}, this);\n\n_c = Record;\nexport default class RecordList extends Component {\n  // This is the constructor that shall store our data retrieved from the database\n  constructor(props) {\n    super(props);\n    this.state = {\n      records: [],\n      loading: false,\n      error: false\n    };\n  }\n\n  async getRecords() {\n    this.setState({\n      loading: true\n    });\n    await axios.get(\"http://localhost:3000/record/\").then(response => {\n      this.setState({\n        records: response.data\n      });\n      window.location.reload();\n      console.log('data recieve');\n      this.setState({\n        loading: false\n      });\n    }).catch(function (error) {\n      console.log(error);\n    });\n  } // This method will get the data from the database.\n\n\n  componentDidMount() {\n    this.getRecords();\n    /*\r\n    axios\r\n      .get(\"http://localhost:3000/record/\")\r\n      .then((response) => {\r\n        this.setState({ records: response.data });\r\n        setLoading(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n      */\n  } // This method will map out the users on the table\n\n\n  recordList() {\n    let sortedElos = this.state.records.sort(function (a, b) {\n      return parseFloat(b.Elo) - parseFloat(a.Elo);\n    });\n    var rankedElos = [];\n\n    for (var i = 0; i < sortedElos.length; i++) {\n      rankedElos[i] = {\n        'id': sortedElos[i]['id'],\n        'playerName': sortedElos[i].playerName,\n        'Elo': sortedElos[i].Elo,\n        'rank': i + 1\n      };\n    }\n\n    return rankedElos.map(currentrecord => {\n      return /*#__PURE__*/_jsxDEV(Record, {\n        record: currentrecord\n      }, currentrecord._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this);\n    });\n  } // This following section will display the table with the records of individuals.\n\n\n  render() {\n    const {\n      error,\n      loading\n    } = this.state;\n\n    if (loading) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"spinner\",\n        children: \"Loading\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 14\n      }, this); // add a spinner or something until the posts are loaded\n    }\n\n    if (error) {\n      return /*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"spinner\",\n        children: \"Error\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 14\n      }, this); // add a spinner or something until the posts are loaded\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Top 50 Current NBA Players\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-striped\",\n        style: {\n          marginTop: 20\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Rank\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 94,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Player Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 95,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Elo\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 96,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 93,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: this.recordList()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"Record\");","map":{"version":3,"sources":["C:/Users/VatsalVed/Desktop/Files/Ranker/ranker/src/components/recordList.js"],"names":["React","Component","axios","Link","Record","props","record","rank","playerName","Elo","RecordList","constructor","state","records","loading","error","getRecords","setState","get","then","response","data","window","location","reload","console","log","catch","componentDidMount","recordList","sortedElos","sort","a","b","parseFloat","rankedElos","i","length","map","currentrecord","_id","render","marginTop"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\n// This will require to npm install axios\r\nimport axios from 'axios';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Record = (props) => (\r\n  <tr>\r\n    <td>{props.record.rank}</td>\r\n    <td>{props.record.playerName}</td>\r\n    <td>{props.record.Elo}</td>\r\n  </tr>\r\n);\r\n\r\n\r\nexport default class RecordList extends Component {\r\n  // This is the constructor that shall store our data retrieved from the database\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { records: [], loading: false, error: false };\r\n  }\r\n\r\n  async getRecords(){\r\n    this.setState({loading: true});\r\n    await axios\r\n      .get(\"http://localhost:3000/record/\")\r\n      .then((response) => {\r\n        this.setState({ records: response.data });\r\n        window.location.reload();\r\n        console.log('data recieve')\r\n          this.setState({loading: false});\r\n        \r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n  }\r\n\r\n  // This method will get the data from the database.\r\n  componentDidMount() {\r\n    \r\n    this.getRecords();\r\n    /*\r\n    axios\r\n      .get(\"http://localhost:3000/record/\")\r\n      .then((response) => {\r\n        this.setState({ records: response.data });\r\n        setLoading(false);\r\n      })\r\n      .catch(function (error) {\r\n        console.log(error);\r\n      });\r\n      */\r\n  }\r\n\r\n  // This method will map out the users on the table\r\n  recordList() {\r\n    let sortedElos = this.state.records.sort(function(a, b) {\r\n      return parseFloat(b.Elo) - parseFloat(a.Elo);\r\n    });\r\n    var rankedElos = []\r\n    for(var i = 0; i < sortedElos.length; i++){\r\n      rankedElos[i] = {\r\n                        'id': sortedElos[i]['id'],\r\n                        'playerName':sortedElos[i].playerName,\r\n                        'Elo': sortedElos[i].Elo,\r\n                        'rank': i+1\r\n                        }\r\n    }\r\n    return rankedElos.map((currentrecord) => {\r\n      return (\r\n        <Record\r\n          record={currentrecord}\r\n          key={currentrecord._id}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  // This following section will display the table with the records of individuals.\r\n  render() {\r\n    const{error,loading} = this.state;\r\n    if(loading){\r\n      return <h1 className=\"spinner\">Loading</h1>; // add a spinner or something until the posts are loaded\r\n    }\r\n    if(error){\r\n      return <h1 className=\"spinner\">Error</h1>; // add a spinner or something until the posts are loaded\r\n    }\r\n    return (\r\n      <div>\r\n        <h3>Top 50 Current NBA Players</h3>\r\n        <table className=\"table table-striped\" style={{ marginTop: 20 }}>\r\n          <thead>\r\n            <tr>\r\n              <th>Rank</th>\r\n              <th>Player Name</th>\r\n              <th>Elo</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{this.recordList()}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}"]},"metadata":{},"sourceType":"module"}